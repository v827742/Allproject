package com.cjc.app.fl.master.main.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import com.cjc.app.fl.master.main.model.Disburse;
import com.cjc.app.fl.master.main.model.Ledger;

import com.cjc.app.fl.master.main.model.Sanction;
import com.cjc.app.fl.master.main.model.UpdateLedger;

import com.cjc.app.fl.master.main.repository.DisburseRepository;
import com.cjc.app.fl.master.main.repository.LedgerRepository;

import com.cjc.app.fl.master.main.repository.SanctionRepository;
import com.cjc.app.fl.master.main.repository.UpdateLedgerRepository;


@Service
public class HomeServiceImpl implements HomeService
{
	
	@Autowired
	SanctionRepository sanctRep;
	
	@Autowired
	DisburseRepository disRep;
	
	@Autowired
	LedgerRepository ledRep;
	
	@Autowired
	UpdateLedgerRepository upLedRep;
	

	
	@Override
	public Sanction sanctionDetails(Sanction san) 
	{
		
		double loanAmount=san.getLoanAmount();
		float ro= san.getRateOfInterest();
		int t= san.getTenure();
		
		
		System.out.println(san);
		System.out.println(loanAmount);
		
       double emi;
		
		ro = ro / (12 * 100); // one month interest
		t = t * 12; // one month period
		emi = (loanAmount * ro * (double)Math.pow(1 + ro, t))
				/ (double)(Math.pow(1 + ro, t) - 1);
	
		System.out.println("MonthlyEmi"+emi);
		
		san.setMonthlyEmi(emi);
		
		return sanctRep.save(san);

	}
	
	@Override
	public Sanction getSanctionById(int loanId) 
	{
		Sanction s=sanctRep.findAllByLoanId(loanId);
		
//		double loanAmount=s.getLoanAmount();
//		float ro= s.getRateOfInterest();
//		int t= s.getTenure();
//		
//		double emi;
//		
//		ro = ro / (12 * 100); // one month interest
//		t = t * 12; // one month period
//		emi = (loanAmount * ro * (double)Math.pow(1 + ro, t))
//				/ (double)(Math.pow(1 + ro, t) - 1);
//	
//		System.out.println(emi);
//		s.setMonthlyEmi(emi);
		
		return s;
	}
	
	public List<Sanction> getAllSanction()
	{

		return sanctRep.findAll();
	}
	
	@Override
	public Disburse disburseDetails(Disburse dis, int loanId) 
	{
		 Sanction sn=getSanctionById(loanId);
		  
		    System.out.println(sn);
		    dis.setCustomerId(sn.getCustomerId());
		    dis.setTenure(sn.getTenure());
		    dis.setMonthlyEmi(sn.getMonthlyEmi());
		    dis.setGeneratedDate(sn.getGeneratedDate());
		    dis.setDealerName(sn.getDealerName());
		    dis.setDealerBankName(sn.getDealerBankName());
		    dis.setDealerBankAccountNumber(sn.getDealerBankAccountNumber());
		    dis.setDealerBankIfscCode(sn.getDealerBankIfscCode());
		    dis.setLoanAmountPayToDealerAcc(sn.getLoanAmountPayToDealerAcc());
		    dis.setDealerEmail(sn.getDealerEmail());
		   
		  
		   
		   System.out.println(dis);
		   
		return disRep.save(dis);
	}


	@Override
	public Ledger ledgerDetails(Ledger ledger, int caseNo) 
	{
		Disburse d=getDisburseByCaseNo(caseNo);
		ledger.setCaseNo(d.getCaseNo());
		ledger.setLoanAmountPayToDealerAcc(d.getLoanAmountPayToDealerAcc());
		ledger.setTenure(d.getTenure());
		ledger.setEmiAmount(d.getMonthlyEmi());
		
		return ledRep.save(ledger);
	}
	
	@Override
	public List<Ledger> getAllLedger() 
	{
		return ledRep.findAll();
	}

	@Override
	public Ledger getLedgerById(int ledgerId) 
	{
		return ledRep.findAllByLedgerId(ledgerId);
	}
	
	@Override
	public Ledger getByCaseNo(int caseNo) 
	{
		return ledRep.findByCaseNo(caseNo);
	}

	
	@Override
	public UpdateLedger updateLedger(UpdateLedger updateLedger) 
	{
		double emi= updateLedger.getEmiAmount();
		double a= updateLedger.getRemaningAmountToPay();
		int t=updateLedger.getTenure();
		int rt=updateLedger.getRemainingTenure();
		double tap=updateLedger.getTotalAmountPaid();
		
		double a1=a-emi;
		int rt1=t-1;//10-1=9-1=8
		return upLedRep.save(updateLedger);
	}
	
	@Override
	public List<UpdateLedger> getAllUpdateLedger() 
	{
		return upLedRep.findAll();
	}

	@Override
	public UpdateLedger getByledgerUpdateId(int ledgerUpdateId) 
	{
		return upLedRep.findAllByLedgerUpdateId(ledgerUpdateId);
	}

	@Override
	public UpdateLedger editUpdateLedger(UpdateLedger updateLedger) 
	{
		return upLedRep.save(updateLedger);
	}

	@Override
	public List<Disburse> getAllDisburse() 
	{
		return disRep.findAll();
	}

	@Override
	public Disburse getDisburseByCaseNo(int caseNo) 
	{
		return disRep.getByCaseNo(caseNo);
	}

	@Override
	public Disburse disburseDetails1(Disburse dis) 
	{
		
		Ledger l=new Ledger();
		l.setCaseNo(dis.getCaseNo());
		l.setTenure(dis.getTenure());
		l.setLoanAmountPayToDealerAcc(dis.getLoanAmountPayToDealerAcc());
		l.setProcessingCharges(dis.getProcessingCharges());
		l.setRemaningAmountToPay(dis.getLoanAmount());
		l.setEmiAmount(dis.getMonthlyEmi());
		l.setRemainingTenure(dis.getTenure());
		
		ledRep.save(l);
		return disRep.save(dis);
	}

	




	

}
